<?xml version="1.0" encoding="UTF-8"?>
<project name="web3" xmlns:ivy="antlib:org.apache.ivy.ant">
    <property file="build.properties"/>

    <target name="download-ivy" unless="offline">

        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/2.5.0/ivy-2.5.0.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
                it into Ant's lib dir (note that the latter copy will always take precedence).
                We will not fail as long as local lib dir exists (it may be empty) and
                Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>

        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
    </target>

    <target name="resolve" description="Use ivy to resolve classpaths" depends="init-ivy">
        <ivy:resolve/>

        <ivy:report todir='build/ivy' graph='false' xml='false'/>
        <ivy:cachepath pathid="runtime.dependencies" conf="runtime"/>
        <ivy:cachepath pathid="test.dependencies" conf="test"/>
    </target>

    <target name="retrive" depends="resolve" description="Use ivy to resolve classpaths">
        <ivy:retrieve sync="true" type="jar" pattern="${lib.dir}/[conf]/[artifact].[ext]"/>
    </target>

    <!--    need to add ant-contrib-1.0b3.jar to ${ANT_HOME}/lib to make it work-->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${antcontrib}"/>
        </classpath>
    </taskdef>


    <target name="clean">
        <delete dir="${tmp}"/>
        <echo>Cleaning succeeded:)</echo>
    </target>

    <target name="compile" depends="clean, retrive">
        <echo>Compilation in process...</echo>
        <mkdir dir="${main.compiled}"/>
        <javac srcdir="${src.main}" destdir="${main.compiled}" includeantruntime="false">
            <classpath>
                <path refid="runtime.dependencies"/>
            </classpath>
        </javac>
        <echo>Compilation succeeded:)</echo>
    </target>

    <target name="build" depends="music, compile">
        <echo>Building in process...</echo>
        <mkdir dir="${build}"/>
        <jar destfile="${build.jar}/${project}.jar">
            <fileset dir="${main.compiled}"/>
            <fileset dir="${src.main.resources}"/>
            <fileset dir="${src.main.webapp}"/>
            <manifest>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="Main"/>
            </manifest>
        </jar>
        <echo>Building succeeded:)</echo>
    </target>

    <target name="test-compile" depends="compile">
        <mkdir dir="${test.compiled}"/>
        <javac srcdir="${src.test}" destdir="${test.compiled}" includeAntRuntime="false">
            <classpath>
                <path refid="test.dependencies"/>
                <pathelement location="${main.compiled}"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="test-compile">
        <junit printsummary="on" haltonfailure="yes">
            <classpath>
                <path refid="test.dependencies"/>
                <pathelement location="${main.compiled}"/>
                <pathelement location="${test.compiled}"/>
            </classpath>
            <formatter type="brief" usefile="false"/>
            <batchtest>
                <fileset dir="${src.test}" includes="**/*Test.java"/>
            </batchtest>
        </junit>
    </target>

    <target name="music">
        <sound>
            <success source="${sounds.success}" duration="6000"/>
            <fail source="${sounds.fail}" duration="5000"/>
        </sound>
    </target>

    <target name="diff"
            description="Проверка состояния рабочей копии, и, если изменения не касаются классов, указанных в файле параметров, выполняет commit в репозиторий git">
        <echo>Finding changes is working directory...</echo>
        <!--        exec- executes a system command. result is saved as "git_status_result"-->
        <!--        here we execute "git status"-->
        <exec executable="git" outputproperty="git_status_result">
            <arg value="status"/>
        </exec>
        <!--        for each java file from list check if it was changed aka mentioned in "git_diff_result-->
        <for param="filename" list="${names}" delimiter=",">
            <sequential>
                <antcall target="find_occasions"/>
            </sequential>
        </for>
        <antcall target="commit"/>
    </target>

    <target name="find_occasions">
        <condition property="files_were_changed">
            <contains string="${git_status_result}" substring="${filename}"/>
        </condition>
    </target>

    <target name="commit" unless="${files_were_changed}">
        <exec executable="git">
            <arg value="add"/>
            <arg value="."/>
        </exec>

        <exec executable="git">
            <arg value="commit"/>
            <arg value="-m 'ant commit'"/>
        </exec>

        <echo>CHANGES WERE COMMITTED</echo>
    </target>

</project>